// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrampoFacil.Infrastructure.Data;

#nullable disable

namespace TrampoFacil.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250730154337_AddFotoPerfilUrlToUsuario")]
    partial class AddFotoPerfilUrlToUsuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Anuncio", b =>
                {
                    b.Property<Guid>("IdAnuncio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cobranca")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdAnuncio");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Anuncio");
                });

            modelBuilder.Entity("Domain.Models.Denuncia", b =>
                {
                    b.Property<Guid>("IdDenuncia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TituloDenuncia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("IdDenuncia");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Denuncia");
                });

            modelBuilder.Entity("Domain.Models.InfoPro", b =>
                {
                    b.Property<Guid>("IdInfoPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cursos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Escolaridade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Experiencias")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Habilidades")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Profissao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uuid");

                    b.HasKey("IdInfoPro");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("InfoPro");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Property<Guid>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfilUrl")
                        .HasColumnType("text");

                    b.Property<int>("Idade")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .HasColumnType("text");

                    b.HasKey("IdUsuario");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("Domain.Models.Anuncio", b =>
                {
                    b.HasOne("Domain.Models.Usuario", "Usuario")
                        .WithMany("Anuncios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.Denuncia", b =>
                {
                    b.HasOne("Domain.Models.Usuario", "Usuario")
                        .WithMany("Denuncias")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.InfoPro", b =>
                {
                    b.HasOne("Domain.Models.Usuario", "Usuario")
                        .WithOne("InfoPro")
                        .HasForeignKey("Domain.Models.InfoPro", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Models.Usuario", b =>
                {
                    b.Navigation("Anuncios");

                    b.Navigation("Denuncias");

                    b.Navigation("InfoPro")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
